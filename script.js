// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let tg = window.Telegram.WebApp;
let userData = {};
let currentScreen = 'main-menu';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initApp();
});

function initApp() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
    tg.ready();
    tg.expand();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
    if (tg.initDataUnsafe?.user) {
        userData = tg.initDataUnsafe.user;
    } else {
        // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
        userData = {
            id: 889233306,
            first_name: "–¢–µ—Å—Ç",
            username: "test_user"
        };
        console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram.');
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserData();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    checkAdminStatus();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    showScreen('main-menu');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadGiveaways();
    loadEarnData();
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const screen = document.getElementById(screenId);
    if (screen) {
        screen.classList.add('active');
        currentScreen = screenId;

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
        switch(screenId) {
            case 'giveaways':
                loadGiveaways();
                break;
            case 'profile':
                loadProfile();
                break;
            case 'earn':
                loadEarnData();
                break;
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData() {
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        document.getElementById('user-name').textContent = userData.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

        // –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const response = await fetch(`/api/user/${userData.id}`);
        if (response.ok) {
            const data = await response.json();
            document.getElementById('user-balance').textContent = data.balance || '0';
        } else {
            document.getElementById('user-balance').textContent = '0';
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        document.getElementById('user-balance').textContent = '0';
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
async function checkAdminStatus() {
    try {
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData.id);

        const response = await fetch(`/api/user/${userData.id}`);
        const data = await response.json();

        console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data);
        console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData.id);
        console.log('–Ø–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º:', data.is_admin);

        if (response.ok && data.is_admin === true) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏');
            window.isAdmin = true;
            const adminButtons = document.getElementById('admin-buttons');
            if (adminButtons) {
                adminButtons.style.display = 'block';
            }
        } else {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º');
            window.isAdmin = false;
            const adminButtons = document.getElementById('admin-buttons');
            if (adminButtons) {
                adminButtons.style.display = 'none';
            }
        }
    } catch (error) {
        console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤:', error);
        const adminButtons = document.getElementById('admin-buttons');
        if (adminButtons) {
            adminButtons.style.display = 'none';
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
async function loadGiveaways() {
    try {
        const container = document.getElementById('giveaways-list');
        container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π...</div>';

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        const response = await fetch('/api/giveaways');
        let giveaways = [];

        if (response.ok) {
            giveaways = await response.json();
        }

        container.innerHTML = '';

        if (giveaways.length === 0) {
            container.innerHTML = '<div style="text-align: center; padding: 40px; color: #666;">üòî –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π</div>';
            return;
        }

        giveaways.forEach(giveaway => {
            const card = createGiveawayCard(giveaway);
            container.appendChild(card);
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
        document.getElementById('giveaways-list').innerHTML = '<div style="text-align: center; padding: 40px; color: #ff0000;">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>';
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
function createGiveawayCard(giveaway) {
    const card = document.createElement('div');
    card.className = 'giveaway-card';
    card.onclick = () => showGiveawayDetail(giveaway);

    const prizesText = Object.entries(giveaway.prizes).map(([place, prize]) => {
        const medal = place == 1 ? "ü•á" : place == 2 ? "ü•à" : place == 3 ? "ü•â" : "üèÖ";
        return `${medal} ${place} –º–µ—Å—Ç–æ: ${prize}`;
    }).join('<br>');

    card.innerHTML = `
        <div class="giveaway-title">${giveaway.name}</div>
        <div class="giveaway-info">
            <span>üìÖ ${giveaway.start_date} - ${giveaway.end_date}</span>
        </div>
        <div class="giveaway-description">${giveaway.description}</div>
        <div style="margin-bottom: 12px; font-size: 14px; line-height: 1.4;">${prizesText}</div>
        <div class="giveaway-stats">
            <span>üë• ${giveaway.participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
            <span>üé´ ${giveaway.total_tickets} –±–∏–ª–µ—Ç–æ–≤</span>
        </div>
    `;

    return card;
}

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
function showGiveawayDetail(giveaway) {
    const modalBody = document.getElementById('modal-body');

    const prizesText = Object.entries(giveaway.prizes).map(([place, prize]) => {
        const medal = place == 1 ? "ü•á" : place == 2 ? "ü•à" : place == 3 ? "ü•â" : "üèÖ";
        return `${medal} <b>${place} –º–µ—Å—Ç–æ:</b> ${prize}`;
    }).join('<br>');

    modalBody.innerHTML = `
        <h3>üéâ ${giveaway.name}</h3>
        <div style="margin: 16px 0;">
            <div style="margin-bottom: 12px;"><strong>–ü—Ä–∏–∑—ã:</strong><br>${prizesText}</div>
            <div style="margin-bottom: 8px;">üìÖ <strong>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</strong> ${giveaway.start_date}</div>
            <div style="margin-bottom: 8px;">‚è≥ <strong>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</strong> ${giveaway.end_date}</div>
            <div style="margin-bottom: 8px;">üë• <strong>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</strong> ${giveaway.participants}</div>
            <div style="margin-bottom: 12px;">üé´ <strong>–í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤:</strong> ${giveaway.total_tickets}</div>
            <div style="margin-bottom: 16px;">${giveaway.description}</div>
        </div>
        <div class="participation-form">
            <h3>üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ</h3>
            <div class="input-group">
                <label for="ticket-count">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤:</label>
                <input type="number" id="ticket-count" min="1" max="100" value="1" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤">
            </div>
            <div class="form-buttons">
                <button class="btn-primary" onclick="participateInGiveaway(${giveaway.id})">üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å</button>
                <button class="btn-secondary" onclick="closeModal()">‚ùå –û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;

    showModal();
}

// –£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
async function participateInGiveaway(giveawayId) {
    if (!userData) {
        showNotification('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 'error');
        return;
    }

    try {
        const response = await fetch('/api/participate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: userData.id,
                giveaway_id: giveawayId
            })
        });

        const data = await response.json();

        if (data.success) {
            showNotification(`‚úÖ –£—á–∞—Å—Ç–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ü–æ—Ç—Ä–∞—á–µ–Ω–æ ${data.tickets_used} –±–∏–ª–µ—Ç–æ–≤`, 'success');
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await loadUserData();
            await loadGiveaways();
        } else {
            showNotification(`‚ùå ${data.error}`, 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:', error);
        showNotification('–û—à–∏–±–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ', 'error');
    }
}

// –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function showCreateGiveawayModal() {
    const modal = document.getElementById('create-giveaway-modal');
    if (modal) {
        modal.style.display = 'block';
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('giveaway-name').value = '';
        document.getElementById('giveaway-description').value = '';
        document.getElementById('giveaway-end-date').value = '';
    }
}

function hideCreateGiveawayModal() {
    const modal = document.getElementById('create-giveaway-modal');
    if (modal) {
        modal.style.display = 'none';
    }
}

async function createGiveaway() {
    const name = document.getElementById('giveaway-name').value.trim();
    const description = document.getElementById('giveaway-description').value.trim();
    const endDate = document.getElementById('giveaway-end-date').value;

    if (!name || !description || !endDate) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }

    try {
        const response = await fetch('/api/admin/create_giveaway', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: userData.id,
                name: name,
                description: description,
                end_date: endDate
            })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
            hideCreateGiveawayModal();
            await loadGiveaways();
        } else {
            showNotification(`‚ùå ${data.error}`, 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞', 'error');
    }
}

async function finishGiveaway(giveawayId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à?')) {
        return;
    }

    try {
        const response = await fetch('/api/admin/finish_giveaway', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: userData.id,
                giveaway_id: giveawayId
            })
        });

        const data = await response.json();

        if (data.success) {
            if (data.winner) {
                showNotification(`üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${data.winner.full_name}! –ë–∏–ª–µ—Ç ‚Ññ${data.winner.ticket_number}`, 'success');
            } else {
                showNotification('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω (–Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)', 'success');
            }
            await loadGiveaways();
        } else {
            showNotification(`‚ùå ${data.error}`, 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞', 'error');
    }
}

async function deleteGiveaway(giveawayId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
        return;
    }

    try {
        const response = await fetch('/api/admin/delete_giveaway', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: userData.id,
                giveaway_id: giveawayId
            })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É–¥–∞–ª–µ–Ω', 'success');
            await loadGiveaways();
        } else {
            showNotification(`‚ùå ${data.error}`, 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞
async function loadEarnData() {
    try {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        document.getElementById('referral-stats').textContent = '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: 0 –¥—Ä—É–∑–µ–π';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫
        const canGetTickets = true; // –í—Ä–µ–º–µ–Ω–Ω–æ
        const subscriptionBtn = document.getElementById('subscription-btn');
        const subscriptionStatus = document.getElementById('subscription-status');

        if (canGetTickets) {
            subscriptionStatus.textContent = '–î–æ—Å—Ç—É–ø–Ω–æ! –ü–æ–ª—É—á–∏—Ç–µ 10 –±–∏–ª–µ—Ç–æ–≤';
            subscriptionBtn.textContent = '–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã';
            subscriptionBtn.disabled = false;
        } else {
            subscriptionStatus.textContent = '–°–ª–µ–¥—É—é—â–∏–µ –±–∏–ª–µ—Ç—ã —á–µ—Ä–µ–∑ 15 –¥–Ω–µ–π';
            subscriptionBtn.textContent = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
            subscriptionBtn.disabled = true;
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞:', error);
    }
}

// –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è
function loadProfile() {
    document.getElementById('profile-name').textContent = userData.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    document.getElementById('profile-id').textContent = `ID: ${userData.id}`;
    document.getElementById('profile-balance').textContent = '0'; // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    document.getElementById('profile-giveaways').textContent = '0'; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π
}

// –ü–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Å—Ç–æ—Ä–∏—Å
function showStoryInstructions() {
    const modalBody = document.getElementById('modal-body');
    modalBody.innerHTML = `
        <h3>üì∏ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å +50 –±–∏–ª–µ—Ç–æ–≤ –∑–∞ —Å—Ç–æ—Ä–∏—Å</h3>
        <div style="margin: 16px 0; line-height: 1.6;">
            <p><strong>1.</strong> –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞</p>
            <p><strong>2.</strong> –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å—Ç–æ—Ä–∏—Å –≤ Instagram –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ç–∏</p>
            <p><strong>3.</strong> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–æ—Ä–∏—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Kalashnikeforce</p>
            <p style="margin-top: 16px; color: #007acc;"><strong>üí° –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 50 –±–∏–ª–µ—Ç–æ–≤!</strong></p>
        </div>
        <button class="btn-primary" style="width: 100%;" onclick="closeModal()">–ü–æ–Ω—è—Ç–Ω–æ</button>
    `;
    showModal();
}

// –ü–æ–∫–∞–∑ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
function showChannels() {
    const modalBody = document.getElementById('modal-body');

    const channels = [
        '@minsk_vape',
        '@vapebel0',
        '@belvape3',
        '@belvape4',
        '@bel_vaping',
        '@vaip_rb',
        '@vapechat_rb'
    ];

    const channelButtons = channels.map(channel => 
        `<a href="https://t.me/${channel.replace('@', '')}" target="_blank" style="display: block; padding: 12px; margin: 8px 0; background: #007acc; color: white; text-decoration: none; border-radius: 8px; text-align: center;">üì¢ ${channel}</a>`
    ).join('');

    modalBody.innerHTML = `
        <h3>üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã</h3>
        <div style="margin: 16px 0;">
            ${channelButtons}
        </div>
        <div class="form-buttons">
            <button class="btn-primary" onclick="checkSubscriptions()">‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏</button>
            <button class="btn-secondary" onclick="closeModal()">‚ùå –û—Ç–º–µ–Ω–∞</button>
        </div>
    `;
    showModal();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
function checkSubscriptions() {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ API
    showNotification('üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –±–∏–ª–µ—Ç–æ–≤ –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏!', 'success');
    closeModal();
    loadUserData();
}

// –ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
function showReferral() {
    const referralLink = `https://t.me/your_bot?start=ref_${userData.id}`;

    const modalBody = document.getElementById('modal-body');
    modalBody.innerHTML = `
        <h3>üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π</h3>
        <div style="margin: 16px 0;">
            <p><strong>üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ ‚Äî 1 –±–∏–ª–µ—Ç!</strong></p>
            <p style="margin: 12px 0;">–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</p>
            <div style="background: #f0f0f0; padding: 12px; border-radius: 8px; word-break: break-all; font-family: monospace; font-size: 14px;">
                ${referralLink}
            </div>
            <p style="margin: 12px 0; font-size: 14px; color: #666;">
                üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏. –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç 10+ –±–∏–ª–µ—Ç–æ–≤ ‚Äî –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!
            </p>
        </div>
        <div class="form-buttons">
            <button class="btn-primary" onclick="copyReferralLink('${referralLink}')">üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
            <button class="btn-secondary" onclick="closeModal()">‚ùå –ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
    `;
    showModal();
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
function copyReferralLink(link) {
    if (navigator.clipboard) {
        navigator.clipboard.writeText(link).then(() => {
            showNotification('üîó –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
        });
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = link;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showNotification('üîó –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
    }
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function showModal() {
    document.getElementById('modal').classList.add('active');
}

function closeModal() {
    document.getElementById('modal').classList.remove('active');
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;

    document.getElementById('notifications').appendChild(notification);

    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// API —Ñ—É–Ω–∫—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏)
async function apiRequest(endpoint, data = null) {
    try {
        const options = {
            method: data ? 'POST' : 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-ID': userData.id
            }
        };

        if (data) {
            options.body = JSON.stringify(data);
        }

        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π URL API
        const response = await fetch(`/api${endpoint}`, options);
        return await response.json();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', error);
        throw error;
    }
}

// –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showStatistics() {
    fetch('/api/admin/stats')
        .then(response => response.json())
        .then(data => {
            const modalBody = document.getElementById('modal-body');
            modalBody.innerHTML = `
                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</h3>
                <div style="margin: 16px 0;">
                    <div style="margin-bottom: 12px;">üë• <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</strong> ${data.users_count || 0}</div>
                    <div style="margin-bottom: 12px;">üéØ <strong>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:</strong> ${data.active_giveaways || 0}</div>
                    <div style="margin-bottom: 12px;">üèÜ <strong>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:</strong> ${data.completed_giveaways || 0}</div>
                    <div style="margin-bottom: 12px;">üé´ <strong>–í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤:</strong> ${data.total_tickets || 0}</div>
                </div>
                <button class="btn-primary" style="width: 100%;" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
            `;
            showModal();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'error');
        });
}

function showGiveawayManagement() {
    const modalBody = document.getElementById('modal-body');
    modalBody.innerHTML = `
        <h3>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏</h3>
        <div style="margin: 16px 0;">
            <p>–§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏:</p>
            <button class="btn-primary" style="width: 100%; margin-bottom: 8px;" onclick="showCreateGiveawayForm()">üé´ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</button>
            <button class="btn-secondary" style="width: 100%; margin-bottom: 8px;" onclick="showActiveGiveaways()">üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏</button>
            <button class="btn-secondary" style="width: 100%; margin-bottom: 8px;" onclick="showCompletedGiveaways()">üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏</button>
            <button class="btn-secondary" style="width: 100%; margin-bottom: 8px;" onclick="showManageExistingGiveaways()">‚úèÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏</button>
        </div>
        <button class="btn-secondary" style="width: 100%;" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
    `;
    showModal();
}

function showManageExistingGiveaways() {
    showNotification('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ', 'info');
    closeModal();
}

function showUserManagement() {
    const modalBody = document.getElementById('modal-body');
    modalBody.innerHTML = `
        <h3>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h3>
        <div style="margin: 16px 0;">
            <p>–§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:</p>
            <div style="margin-bottom: 12px;">
                <input type="number" id="user-id-input" placeholder="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" style="width: 100%; padding: 8px; margin-bottom: 8px; border: 1px solid #ddd; border-radius: 4px;">
                <input type="number" id="tickets-amount-input" placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤" style="width: 100%; padding: 8px; margin-bottom: 8px; border: 1px solid #ddd; border-radius: 4px;">
            </div>
            <button class="btn-primary" style="width: 100%; margin-bottom: 8px;" onclick="addTicketsToUser()">üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∏–ª–µ—Ç—ã</button>
            <button class="btn-secondary" style="width: 100%; margin-bottom: 8px;" onclick="removeTicketsFromUser()">üí∏ –°–ø–∏—Å–∞—Ç—å –±–∏–ª–µ—Ç—ã</button>
            <div style="margin-top: 16px;">
                <input type="number" id="ban-user-id-input" placeholder="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞" style="width: 100%; padding: 8px; margin-bottom: 8px; border: 1px solid #ddd; border-radius: 4px;">
                <button class="btn-secondary" style="width: 100%; margin-bottom: 8px;" onclick="banUser()">üö´ –ó–∞–±–∞–Ω–∏—Ç—å</button>
                <button class="btn-secondary" style="width: 100%;" onclick="unbanUser()">‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å</button>
            </div>
        </div>
        <button class="btn-secondary" style="width: 100%;" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
    `;
    showModal();
}

function showCreateGiveaway() {
    showCreateGiveawayForm();
}

function showCreateGiveawayForm() {
    const modalBody = document.getElementById('modal-body');
    modalBody.innerHTML = `
        <h3>üé´ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à</h3>
        <div style="margin: 16px 0;">
            <div class="input-group">
                <label for="giveaway-name">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</label>
                <input type="text" id="giveaway-name" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –≤–µ–π–ø-—Ç–æ–≤–∞—Ä–æ–≤" style="width: 100%; padding: 8px; margin-bottom: 12px; border: 1px solid #ddd; border-radius: 4px;">
            </div>

            <div class="input-group">
                <label for="giveaway-description">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                <textarea id="giveaway-description" placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞..." style="width: 100%; padding: 8px; margin-bottom: 12px; border: 1px solid #ddd; border-radius: 4px; min-height: 80px; resize: vertical;"></textarea>
            </div>

            <div style="display: flex; gap: 12px; margin-bottom: 12px;">
                <div style="flex: 1;">
                    <label for="start-date">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</label>
                    <input type="date" id="start-date" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                </div>
                <div style="flex: 1;">
                    <label for="end-date">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</label>
                    <input type="date" id="end-date" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                </div>
            </div>

            <div class="input-group">
                <label for="end-time">–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:</label>
                <input type="time" id="end-time" value="23:59" style="width: 100%; padding: 8px; margin-bottom: 12px; border: 1px solid #ddd; border-radius: 4px;">
            </div>

            <div class="input-group">
                <label>–ü—Ä–∏–∑—ã (–ø–æ –º–µ—Å—Ç–∞–º):</label>
                <div id="prizes-container">
                    <div style="display: flex; gap: 8px; margin-bottom: 8px; align-items: center;">
                        <span style="min-width: 60px;">ü•á 1 –º–µ—Å—Ç–æ:</span>
                        <input type="text" class="prize-input" data-place="1" placeholder="–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑" style="flex: 1; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                    </div>
                </div>
                <button type="button" onclick="addPrizeField()" style="background: #28a745; color: white; border: none; padding: 6px 12px; border-radius: 4px; margin-top: 8px;">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑</button>
            </div>

            <div class="input-group">
                <label style="display: flex; align-items: center; gap: 8px;">
                    <input type="checkbox" id="auto-complete" checked>
                    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                </label>
            </div>
        </div>
        <div class="form-buttons">
            <button class="btn-primary" onclick="createGiveaway()">üéâ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</button>
            <button class="btn-secondary" onclick="closeModal()">‚ùå –û—Ç–º–µ–Ω–∞</button>
        </div>
    `;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('start-date').value = today;
    document.getElementById('start-date').min = today;
    document.getElementById('end-date').min = today;

    showModal();
}

function addPrizeField() {
    const container = document.getElementById('prizes-container');
    const prizeCount = container.children.length + 1;

    const medals = ['ü•á', 'ü•à', 'ü•â'];
    const medal = medals[prizeCount - 1] || 'üèÖ';

    const prizeDiv = document.createElement('div');
    prizeDiv.style.cssText = 'display: flex; gap: 8px; margin-bottom: 8px; align-items: center;';
    prizeDiv.innerHTML = `
        <span style="min-width: 60px;">${medal} ${prizeCount} –º–µ—Å—Ç–æ:</span>
        <input type="text" class="prize-input" data-place="${prizeCount}" placeholder="–ü—Ä–∏–∑ ${prizeCount} –º–µ—Å—Ç–∞" style="flex: 1; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
        <button type="button" onclick="this.parentNode.remove()" style="background: #dc3545; color: white; border: none; padding: 6px 12px; border-radius: 4px;">‚ùå</button>
    `;

    container.appendChild(prizeDiv);
}

async function createGiveaway() {
    try {
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const name = document.getElementById('giveaway-name').value.trim();
        const description = document.getElementById('giveaway-description').value.trim();
        const startDate = document.getElementById('start-date').value;
        const endDate = document.getElementById('end-date').value;
        const endTime = document.getElementById('end-time').value;
        const autoComplete = document.getElementById('auto-complete').checked;

        // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑—ã
        const prizeInputs = document.querySelectorAll('.prize-input');
        const prizes = {};
        let hasValidPrizes = false;

        prizeInputs.forEach(input => {
            const place = input.getAttribute('data-place');
            const prize = input.value.trim();
            if (prize) {
                prizes[place] = prize;
                hasValidPrizes = true;
            }
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!name) {
            showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞', 'error');
            return;
        }

        if (!description) {
            showNotification('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞', 'error');
            return;
        }

        if (!startDate || !endDate) {
            showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è', 'error');
            return;
        }

        if (new Date(endDate) <= new Date(startDate)) {
            showNotification('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞', 'error');
            return;
        }

        if (!hasValidPrizes) {
            showNotification('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑', 'error');
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const giveawayData = {
            name,
            description,
            start_date: startDate,
            end_date: endDate,
            end_time: endTime,
            auto_complete: autoComplete,
            prizes,
            admin_id: userData.id
        };

        const response = await fetch('/api/admin/create-giveaway', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(giveawayData)
        });

        const result = await response.json();

        if (result.success) {
            showNotification('üéâ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
            closeModal();
            loadGiveaways(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
        } else {
            showNotification(`–û—à–∏–±–∫–∞: ${result.error}`, 'error');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞', 'error');
    }
}

function showActiveGiveaways() {
    loadGiveaways();
    closeModal();
    showScreen('giveaways');
}

function showCompletedGiveaways() {
    showNotification('–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω', 'info');
    closeModal();
}

function addTicketsToUser() {
    const userId = document.getElementById('user-id-input').value;
    const amount = document.getElementById('tickets-amount-input').value;

    if (!userId || !amount) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤', 'error');
```python
        return;
    }

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤
    showNotification(`–ù–∞—á–∏—Å–ª–µ–Ω–æ ${amount} –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`, 'success');
    closeModal();
}

function removeTicketsFromUser() {
    const userId = document.getElementById('user-id-input').value;
    const amount = document.getElementById('tickets-amount-input').value;

    if (!userId || !amount) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤', 'error');
        return;
    }

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤
    showNotification(`–°–ø–∏—Å–∞–Ω–æ ${amount} –±–∏–ª–µ—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`, 'success');
    closeModal();
}

function banUser() {
    const userId = document.getElementById('ban-user-id-input').value;

    if (!userId) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        return;
    }

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–∞–Ω–∞
    showNotification(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`, 'success');
    closeModal();
}

function unbanUser() {
    const userId = document.getElementById('ban-user-id-input').value;

    if (!userId) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        return;
    }

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞
    showNotification(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`, 'success');
    closeModal();
}

// –£—Ç–∏–ª–∏—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
}

function formatNumber(number) {
    return new Intl.NumberFormat('ru-RU').format(number);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        closeModal();
    }
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('modal-content')) {
        e.stopPropagation();
    }
});



async function manageUserTickets(action) {
    const userId = document.getElementById('tickets-user-id').value;
    const amount = document.getElementById('tickets-amount').value;

    if (!userId || !amount) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', 'error');
        return;
    }

    if (parseInt(amount) <= 0) {
        showNotification('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!', 'error');
        return;
    }

    try {
        const response = await fetch(`/api/admin/users/${userId}/tickets`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                admin_id: currentUser.id,
                action: action,
                amount: parseInt(amount)
            })
        });

        const result = await response.json();

        if (result.success) {
            showNotification(result.message, 'success');
            document.getElementById('tickets-user-id').value = '';
            document.getElementById('tickets-amount').value = '';
        } else {
            showNotification(result.error, 'error');
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', 'error');
    }
}

async function manageUserBan(action) {
    const userId = document.getElementById('ban-user-id').value;

    if (!userId) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!', 'error');
        return;
    }

    try {
        const response = await fetch(`/api/admin/users/${userId}/ban`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                admin_id: currentUser.id,
                action: action
            })
        });

        const result = await response.json();

        if (result.success) {
            showNotification(result.message, 'success');
            document.getElementById('ban-user-id').value = '';
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
            if (document.getElementById('users-list').children.length > 0) {
                loadUsers();
            }
        } else {
            showNotification(result.error, 'error');
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', 'error');
    }
}

async function loadUsers() {
    try {
        const response = await fetch(`/api/admin/users?admin_id=${currentUser.id}`);
        const users = await response.json();

        const container = document.getElementById('users-list');

        if (users.length === 0) {
            container.innerHTML = '<p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
            return;
        }

        let html = '<div class="users-grid">';
        users.forEach(user => {
            const statusBadge = user.is_banned ? 
                '<span class="badge danger">üö´ –ó–∞–±–∞–Ω–µ–Ω</span>' : 
                '<span class="badge success">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>';

            html += `
                <div class="user-card">
                    <div class="user-info">
                        <div class="user-name">${user.full_name}</div>
                        <div class="user-details">
                            ID: ${user.user_id}<br>
                            @${user.username || '–Ω–µ—Ç'}<br>
                            üí∞ ${user.tickets} –±–∏–ª–µ—Ç–æ–≤
                        </div>
                        ${statusBadge}
                    </div>
                    <div class="user-actions">
                        <button onclick="quickTickets(${user.user_id}, 10)" class="mini-btn success">+10 üí∞</button>
                        <button onclick="quickTickets(${user.user_id}, -10)" class="mini-btn danger">-10 üí∞</button>
                        ${user.is_banned ? 
                            `<button onclick="quickUnban(${user.user_id})" class="mini-btn success">‚úÖ</button>` :
                            `<button onclick="quickBan(${user.user_id})" class="mini-btn danger">üö´</button>`
                        }
                    </div>
                </div>
            `;
        });
        html += '</div>';

        container.innerHTML = html;
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
    }
}

async function quickTickets(userId, amount) {
    const action = amount > 0 ? 'add' : 'remove';
    const absAmount = Math.abs(amount);

    try {
        const response = await fetch(`/api/admin/users/${userId}/tickets`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                admin_id: currentUser.id,
                action: action,
                amount: absAmount
            })
        });

        const result = await response.json();

        if (result.success) {
            showNotification(result.message, 'success');
            loadUsers(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            showNotification(result.error, 'error');
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', 'error');
    }
}

async function quickBan(userId) {
    await manageUserBanById(userId, 'ban');
}

async function quickUnban(userId) {
    await manageUserBanById(userId, 'unban');
}

async function manageUserBanById(userId, action) {
    try {
        const response = await fetch(`/api/admin/users/${userId}/ban`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                admin_id: currentUser.id,
                action: action
            })
        });

        const result = await response.json();

        if (result.success) {
            showNotification(result.message, 'success');
            loadUsers(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            showNotification(result.error, 'error');
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', 'error');
    }
}

function showBackups() {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="container">
            <h2>üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏</h2>
            <div id="backups-list">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            <button class="back-btn" onclick="showMainMenu()">üîô –ù–∞–∑–∞–¥</button>
        </div>
    `;
    loadBackups();
}

// The code has been modified to include the admin panel features.